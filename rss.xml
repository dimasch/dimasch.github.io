<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Блог о производительности веб-приложений и сайтах с низким энергопотреблением]]></title><description><![CDATA[Дмитрий Щеголихин пишет о его опыте разработки для платформ Magento2, Vue и оптимизациях фронтенда. Помогает компаниям зарабатывать больше, делая веб-приложения быстрее.]]></description><link>http://dimasch.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Tue, 06 Nov 2018 18:39:24 GMT</lastBuildDate><item><title><![CDATA[Процесс разработки модулей для magento1]]></title><description><![CDATA[Здесь должен быть скрин Здесь должен быть скрин]]></description><link>http://dimasch.github.io//composer-modman-n98/</link><guid isPermaLink="false">http://dimasch.github.io//composer-modman-n98/</guid><pubDate>Mon, 11 Jan 2016 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;Немного истории. На заре разработки magento-модулей в нашей команде в тот момент когда мы начали использовать composer для установки magento-модулей в проекты, появилась задача хранить код модуля при разработке отдельно от ядра magento. Дело в том что magento 1.x обладает довольно сложной структурой и заставляет мешать ваши собственные файлы расширений с тысячами файлов и директорий ядра magento. Некоторое время использовали для решения этой задачи - composer, хотя он нужен несколько для других вещей. Спрашивал у коллег бэкендеров как они решают эту задачу - ответили «по старинке обычным копированием в проект».  Нет это не наш путь - искать при выносе в композер все соответствующие файлы, а если файл инициализации модуля забыт? Чем же пользуются сертифицированные magento программисты при разработке модулей?&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/19464.js&quot; id=&quot;asciicast-19464&quot; data-theme=&quot;tango&quot; async&gt;&lt;/script&gt;
&lt;p&gt;Задача: сгенерировать скелетон модуля и оформить его в виде композер модуля и чтобы эти действия не занимали много времени.&lt;/p&gt;
&lt;p&gt;Как мы делали до того как узнали про modman. Была идея установки модуля и симлинков через композер - это долго и в последствии отказались от этого, composer update происходит слишком долго. Нужен инструмент прокидывающий симлинки рядом с директориями magento ядра на основе некоторого маппинга. Был найден modman, опробован и внедрен.&lt;/p&gt;
&lt;p&gt;Что же такое modman? Подробнее можно ознакомиться по ссылке &lt;a href=&quot;https://github.com/colinmollenhour/modman&quot;&gt;https://github.com/colinmollenhour/modman&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Modman позволяет сохранять файлы ваших magento-модулей отдельно от тысяч файлов ядра magento. При этом можно держать файлы модуля в отдельном репозитории системы контроля версий, это сопутствующая фича.&lt;/p&gt;
&lt;p&gt;Начало работы&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;Заходим в директорий с magento сайтом и делаем modman init, создается служебная директорий в которую в последствии будут устанавливаться модули .modman (по аналогии с composer - там vendor)&lt;/li&gt;
 &lt;li&gt;Обязательно нужно разрешить использование симлинков в админке System &gt; Configuration &gt; Advanced &gt; Developer&lt;/li&gt;
 &lt;li&gt;Один из вариантов делаем modman link path_to_module_folder (есть ещё modman clone repo_url - указывается путь до репозитория)&lt;/li&gt;
 &lt;li&gt;Чтобы можно было сделать modman link или modman clone модуль должен содержать файл маппинга. Маппинг указывается для каждого файла модуля - по принципу source -&gt; destination.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Один из плюсов - полная интеграция modman и composer. Композер умеет читать маппинг модман-файла, то есть маппинг находится в одном файле и можно использовать две технологии одновременно. &lt;/p&gt;
&lt;p&gt;Теперь самое интересное - как же автоматизировать все рутинные операции? Тут к нам на помощь приходят две тулы n98magerun и generate-modman.  По поводу n98magerun написано очень много статей разного плана. Прикрепляю ссылки на тулы:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/netz98/n98-magerun&quot;&gt;https://github.com/netz98/n98-magerun&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mhauri/generate-modman&quot;&gt;https://github.com/mhauri/generate-modman&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Как n98magerun и generate-modman можно использовать применительно к modman? В n98magerun есть генератор модуля, но тут необходимо добавить магические ключи:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
n98-magerun dev:module:create --add-all --modman --add-composer --author-name=&quot;Dmitry Schegolihin&quot; --author-email=&quot;d.sch@gmail.com&quot; Shegolihin Generated local
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Командой будет создан скелетон модуля Generated с стандартной структурой magento-модуля, предподготовленным файлом конфигурации composer.json, c неймспейсом Shegolihin в local code pull и соответствующим файлом маппинга modman. Ключи --author-name и --author-email добавят параметры в composer.json&lt;/p&gt;
&lt;p&gt;Здесь должен быть скрин&lt;/p&gt;
&lt;p&gt;Структура каталогов получилась не совсем стандартной из-за директории src. Давайте её уберем: переносим содержимое src в текущюю папку, удаляем src и вызываем генератор автоматического маппинга generate-modman. В итоге должна получиться структура:&lt;/p&gt;
&lt;p&gt;Здесь должен быть скрин&lt;/p&gt;
&lt;p&gt;Допустим в процессе работы понадобилось замапить ещё одну директорию - не забываем перегенирить modman файл маппинга и починить все симлинки modman repair. Из документации:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
repair - rebuild all modman-created symlinks (no updates performed)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Можно набрать в консоли команду modman - выдаст документацию, в которой можно быстро найти нужный ключ.&lt;/p&gt;
&lt;p&gt;C наступающий Старым Новым Годом! ;-)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Magento2 - cоздать пользователя-администратора]]></title><description><![CDATA[Выполняем команду из каталога с установленной Magento2:]]></description><link>http://dimasch.github.io//magento2-create-admin/</link><guid isPermaLink="false">http://dimasch.github.io//magento2-create-admin/</guid><pubDate>Tue, 16 Jun 2015 21:42:03 GMT</pubDate><content:encoded>&lt;p&gt;Выполняем команду из каталога с установленной Magento2:&lt;/p&gt;
&lt;pre&gt;
./bin/magento admin:user:create --admin-firstname=&quot;Admin&quot; --admin-lastname=&quot;User&quot; --admin-email=&quot;dimasch@gmail.com&quot; --admin-user=&quot;dimasch&quot; --admin-password=&quot;dimasch&quot;
&lt;/pre&gt;</content:encoded></item></channel></rss>