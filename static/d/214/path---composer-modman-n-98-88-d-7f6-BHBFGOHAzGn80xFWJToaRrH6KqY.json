{"data":{"site":{"siteMetadata":{"title":"Блог о производительности веб-приложений и сайтах с низким энергопотреблением","author":"Dmitry Schegolihin"}},"markdownRemark":{"id":"7ccb7ee0-1e0c-5f2e-aed3-26322c989eae","excerpt":"Немного истории. На заре разработки magento-модулей в нашей команде в тот момент когда мы начали использовать composer для установки magento…","html":"<p>Немного истории.</p>\n<blockquote>\n<p>На заре разработки magento-модулей в нашей команде в тот момент когда мы начали использовать composer для установки magento-модулей в\nпроекты, появилась задача хранить код модуля при разработке отдельно от ядра magento. Дело в том что magento 1.x обладает довольно сложной\nструктурой и заставляет мешать ваши собственные файлы расширений с тысячами файлов и директорий ядра magento. Некоторое время использовали\nдля решения этой задачи - composer, хотя он нужен несколько для других вещей. Спрашивал у коллег бэкендеров как они решают эту задачу -\nответили «по старинке обычным копированием в проект».  Нет это не наш путь - искать при выносе в композер все соответствующие файлы, а если\nфайл инициализации модуля забыли добавить?</p>\n</blockquote>\n<script type=\"text/javascript\" src=\"https://asciinema.org/a/19464.js\" id=\"asciicast-19464\" data-theme=\"tango\" async></script>\n<p>Задача: сгенерировать скелетон модуля и оформить его в виде композер модуля и чтобы эти действия не занимали много времени.</p>\n<p>Как мы делали до того как узнали про modman. Была идея установки модуля и симлинков через композер - это долго и в последствии отказались от этого, composer update происходит слишком долго. Нужен инструмент упрощающий работу с симлинками. Так был найден modman.</p>\n<p>Для чего нужен <a href=\"https://github.com/colinmollenhour/modman\">modman</a>?</p>\n<p>Modman позволяет сохранять файлы ваших magento-модулей отдельно от тысяч файлов ядра magento. При этом можно держать файлы модуля в отдельном репозитории системы контроля версий, это сопутствующая фича.</p>\n<p>Начало работы</p>\n<ol>\n <li>Заходим в директорий с magento сайтом и делаем modman init, создается служебная директорий в которую в последствии будут устанавливаться модули .modman (по аналогии с composer - там vendor)</li>\n <li>Обязательно нужно разрешить использование симлинков в админке <pre>System > Configuration > Advanced > Developer</pre></li>\n <li>Один из вариантов делаем <pre>modman link path/to/module</pre> (есть ещё <pre>modman clone url</pre> - указывается путь до репозитория)</li>\n <li>Чтобы можно было сделать <pre>modman link</pre> или <pre>modman clone</pre> модуль должен содержать файл маппинга. Маппинг указывается для каждого файла модуля - по принципу source -> destination.</li>\n</ol>\n<p>Один из плюсов - полная интеграция modman и composer. Композер умеет читать маппинг модман-файла, то есть маппинг находится в одном файле и можно использовать две технологии одновременно. </p>\n<p>Теперь самое интересное - как же автоматизировать все рутинные операции? Тут нам помогут <a href=\"https://github.com/netz98/n98-magerun\">n98-magerun</a> и <a href=\"https://github.com/mhauri/generate-modman\">generate-modman</a>.\n<p>Как n98magerun и generate-modman можно использовать применительно к modman? В n98magerun есть генератор модуля, но тут необходимо добавить магические ключи:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">n98-magerun dev:module:create --add-all --modman --add-composer --author-name<span class=\"token operator\">=</span><span class=\"token string\">\"Dmitry Schegolihin\"</span> --author-email<span class=\"token operator\">=</span><span class=\"token string\">\"d.sch@gmail.com\"</span> Shegolihin Generated local</code></pre></div>\n<p>Командой будет создан скелетон модуля Generated с стандартной структурой magento-модуля, предподготовленным файлом конфигурации composer.json, c неймспейсом Shegolihin в local code pull и соответствующим файлом маппинга modman. Ключи --author-name и --author-email добавят параметры в composer.json</p>\n<p>Структура каталогов получилась не совсем стандартной из-за директории src. Давайте её уберем: переносим содержимое src в текущюю папку, удаляем src и вызываем генератор автоматического маппинга generate-modman. В итоге должна получиться структура:</p>\n<p>Допустим в процессе работы понадобилось замапить ещё одну директорию - не забываем перегенирить modman файл маппинга и починить все симлинки modman repair. Из документации:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">repair - rebuild all modman-created symlinks <span class=\"token punctuation\">(</span>no updates performed<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Можно набрать в консоли команду modman - выдаст документацию, в которой можно быстро найти нужный ключ.</p>\n<p>C наступающий Старым Новым Годом! ;-)</p>","frontmatter":{"title":"Magento1 module development process on steroids","date":"January 13, 2016"}}},"pageContext":{"slug":"/composer-modman-n98/","previous":{"fields":{"slug":"/magento2-create-admin/"},"frontmatter":{"title":"Admin user create in Magento2"}},"next":{"fields":{"slug":"/redis-clear/"},"frontmatter":{"title":"Очистить хранилище Redis"}}}}