{"data":{"site":{"siteMetadata":{"title":"Блог о производительности веб-приложений и сайтах с низким энергопотреблением","author":"Dmitry Schegolihin"}},"markdownRemark":{"id":"6ff7766d-871a-572c-94b8-200a0acce562","excerpt":"Здесь должен быть скрин","html":"<p>Немного истории. На заре разработки magento-модулей в нашей команде в тот момент когда мы начали использовать composer для установки magento-модулей в проекты, появилась задача хранить код модуля при разработке отдельно от ядра magento. Дело в том что magento 1.x обладает довольно сложной структурой и заставляет мешать ваши собственные файлы расширений с тысячами файлов и директорий ядра magento. Некоторое время использовали для решения этой задачи - composer, хотя он нужен несколько для других вещей. Спрашивал у коллег бэкендеров как они решают эту задачу - ответили «по старинке обычным копированием в проект».  Нет это не наш путь - искать при выносе в композер все соответствующие файлы, а если файл инициализации модуля забыт? Чем же пользуются сертифицированные magento программисты при разработке модулей?</p>\n<script type=\"text/javascript\" src=\"https://asciinema.org/a/19464.js\" id=\"asciicast-19464\" data-theme=\"tango\" async></script>\n<p>Задача: сгенерировать скелетон модуля и оформить его в виде композер модуля и чтобы эти действия не занимали много времени.</p>\n<p>Как мы делали до того как узнали про modman. Была идея установки модуля и симлинков через композер - это долго и в последствии отказались от этого, composer update происходит слишком долго. Нужен инструмент прокидывающий симлинки рядом с директориями magento ядра на основе некоторого маппинга. Был найден modman, опробован и внедрен.</p>\n<p>Что же такое modman? Подробнее можно ознакомиться по ссылке <a href=\"https://github.com/colinmollenhour/modman\">https://github.com/colinmollenhour/modman</a></p>\n<p>Modman позволяет сохранять файлы ваших magento-модулей отдельно от тысяч файлов ядра magento. При этом можно держать файлы модуля в отдельном репозитории системы контроля версий, это сопутствующая фича.</p>\n<p>Начало работы</p>\n<ol>\n <li>Заходим в директорий с magento сайтом и делаем modman init, создается служебная директорий в которую в последствии будут устанавливаться модули .modman (по аналогии с composer - там vendor)</li>\n <li>Обязательно нужно разрешить использование симлинков в админке System > Configuration > Advanced > Developer</li>\n <li>Один из вариантов делаем modman link path_to_module_folder (есть ещё modman clone repo_url - указывается путь до репозитория)</li>\n <li>Чтобы можно было сделать modman link или modman clone модуль должен содержать файл маппинга. Маппинг указывается для каждого файла модуля - по принципу source -> destination.</li>\n</ol>\n<p>Один из плюсов - полная интеграция modman и composer. Композер умеет читать маппинг модман-файла, то есть маппинг находится в одном файле и можно использовать две технологии одновременно. </p>\n<p>Теперь самое интересное - как же автоматизировать все рутинные операции? Тут к нам на помощь приходят две тулы n98magerun и generate-modman.  По поводу n98magerun написано очень много статей разного плана. Прикрепляю ссылки на тулы:</p>\n<p><a href=\"https://github.com/netz98/n98-magerun\">https://github.com/netz98/n98-magerun</a></p>\n<p><a href=\"https://github.com/mhauri/generate-modman\">https://github.com/mhauri/generate-modman</a></p>\n<p>Как n98magerun и generate-modman можно использовать применительно к modman? В n98magerun есть генератор модуля, но тут необходимо добавить магические ключи:</p>\n<pre>\n<code>\nn98-magerun dev:module:create --add-all --modman --add-composer --author-name=\"Dmitry Schegolihin\" --author-email=\"d.sch@gmail.com\" Shegolihin Generated local\n</code>\n</pre>\n<p>Командой будет создан скелетон модуля Generated с стандартной структурой magento-модуля, предподготовленным файлом конфигурации composer.json, c неймспейсом Shegolihin в local code pull и соответствующим файлом маппинга modman. Ключи --author-name и --author-email добавят параметры в composer.json</p>\n<p><img src=\"./login.png\" alt=\"Login to Magento2 backend\"></p>\n<p>Структура каталогов получилась не совсем стандартной из-за директории src. Давайте её уберем: переносим содержимое src в текущюю папку, удаляем src и вызываем генератор автоматического маппинга generate-modman. В итоге должна получиться структура:</p>\n<p>Здесь должен быть скрин</p>\n<p>Допустим в процессе работы понадобилось замапить ещё одну директорию - не забываем перегенирить modman файл маппинга и починить все симлинки modman repair. Из документации:</p>\n<pre>\n<code>\nrepair - rebuild all modman-created symlinks (no updates performed)\n</code>\n</pre>\n<p>Можно набрать в консоли команду modman - выдаст документацию, в которой можно быстро найти нужный ключ.</p>\n<p>C наступающий Старым Новым Годом! ;-)</p>","frontmatter":{"title":"Процесс разработки модулей для magento1","date":"January 11, 2016"}}},"pageContext":{"slug":"/composer-modman-n98/","previous":{"fields":{"slug":"/magento2-create-admin/"},"frontmatter":{"title":"Magento2 - cоздать пользователя-администратора"}},"next":null}}