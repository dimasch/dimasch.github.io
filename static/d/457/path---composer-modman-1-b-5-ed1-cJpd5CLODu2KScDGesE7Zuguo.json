{"data":{"site":{"siteMetadata":{"title":"About web performance and sites with energy low.","author":"Dmitry Schegolihin"}},"markdownRemark":{"id":"316d34a6-39ba-5bed-ae8b-fb9b466542c2","excerpt":"Немного истории На заре разработки   модулей в нашей команде в тот момент когда мы начали использовать   для установки   модулей в\nпроекты…","html":"<h2>Немного истории</h2>\n<p>На заре разработки <code class=\"language-text\">magento</code> модулей в нашей команде в тот момент когда мы начали использовать <code class=\"language-text\">composer</code> для установки <code class=\"language-text\">magento</code> модулей в\nпроекты, появилась задача хранить код модуля при разработке отдельно от ядра <code class=\"language-text\">magento</code>. Дело в том что <code class=\"language-text\">magento 1.x</code> обладает довольно сложной структурой и заставляет мешать ваши собственные файлы расширений с тысячами файлов и директорий ядра magento. Некоторое время использовали для решения этой задачи - <code class=\"language-text\">composer</code>, хотя он нужен несколько для других вещей.</p>\n<p><a href=\"https://asciinema.org/a/19464\"><img src=\"https://asciinema.org/a/19464.png\" alt=\"asciicast\"></a></p>\n<p>Хотелось бы в автоматическом режиме генерировать скелетон модуля с композер конфигом.</p>\n<p>Как мы делали до того как узнали про <code class=\"language-text\">modman</code>. Была идея установки модуля и симлинков через композер - это долго и в последствии отказались от этого, <code class=\"language-text\">composer update</code> происходит слишком долго. Нужен инструмент упрощающий работу с симлинками. Так был найден <a href=\"https://github.com/colinmollenhour/modman\">modman</a>. <code class=\"language-text\">Modman</code> позволяет сохранять файлы ваших magento-модулей отдельно от тысяч файлов ядра magento. При этом можно держать файлы модуля в отдельном репозитории системы контроля версий, это сопутствующая фича.</p>\n<h2>Опыт использования</h2>\n<ul>\n<li>Заходим в директорий с magento сайтом и делаем <code class=\"language-text\">modman init</code>, создается служебная директорий в которую в последствии будут устанавливаться модули <code class=\"language-text\">.modman</code> (по аналогии с composer - там <code class=\"language-text\">vendor</code>)</li>\n<li>Обязательно нужно разрешить использование симлинков в админке <code class=\"language-text\">System &gt; Configuration &gt; Advanced &gt; Developer</code></li>\n<li>Один из вариантов делаем <code class=\"language-text\">modman link path/to/module</code> (есть ещё <code class=\"language-text\">modman clone url</code> - указывается путь до репозитория)</li>\n<li>Чтобы можно было сделать <code class=\"language-text\">modman link</code> или <code class=\"language-text\">modman clone</code> модуль должен содержать файл маппинга. Маппинг указывается для каждого файла модуля - по принципу <code class=\"language-text\">source</code> -> <code class=\"language-text\">destination</code>.</li>\n</ul>\n<p>Один из плюсов - полная интеграция <code class=\"language-text\">modman</code> и <code class=\"language-text\">composer</code>. Композер умеет читать маппинг модман-файла, то есть маппинг находится в одном файле и можно использовать две технологии одновременно.</p>\n<p>Теперь самое интересное - как же автоматизировать все рутинные операции? Тут нам помогут <a href=\"https://github.com/netz98/n98-magerun\">n98-magerun</a> и <a href=\"https://github.com/mhauri/generate-modman\">generate-modman</a>.\n<p>Как <code class=\"language-text\">n98magerun</code> и <code class=\"language-text\">generate-modman</code> можно использовать применительно к modman? В <code class=\"language-text\">n98magerun</code> есть генератор модуля, но тут необходимо добавить магические ключи:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">n98-magerun dev:module:create --add-all --modman --add-composer --author-name=&quot;Autor Name&quot; --author-email=&quot;@gmail.com&quot; CustomNamespace CustomModule local</code></pre></div>\n<p>Командой будет создан скелетон модуля <code class=\"language-text\">CustomModule</code> с стандартной структурой magento-модуля, предподготовленным файлом конфигурации composer.json, c неймспейсом <code class=\"language-text\">CustomNamespace</code> в <code class=\"language-text\">local code pull</code> и соответствующим файлом маппинга modman. Ключи <code class=\"language-text\">--author-name</code> и <code class=\"language-text\">--author-email</code> добавят параметры в <code class=\"language-text\">composer.json</code></p>\n<p>Структура каталогов получилась не совсем стандартной из-за директории <code class=\"language-text\">src</code>. Давайте её уберем: переносим содержимое <code class=\"language-text\">src</code> в текущюю папку, удаляем <code class=\"language-text\">src</code> и вызываем генератор автоматического маппинга <code class=\"language-text\">generate-modman</code>. В итоге должна получиться структура:</p>\n<p>Допустим в процессе работы понадобилось замапить ещё одну директорию - не забываем перегенирить <code class=\"language-text\">modman</code> файл маппинга и починить все симлинки <code class=\"language-text\">modman repair</code>. Из документации:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">repair - rebuild all modman-created symlinks (no updates performed)</code></pre></div>\n<p>Можно набрать в консоли команду <code class=\"language-text\">modman</code> - выдаст документацию, в которой можно быстро найти нужный ключ.</p>\n<p>C наступающий Старым Новым Годом! :)</p>","frontmatter":{"title":"Improve you Magento1 module development process","date":"January 13, 2016"}}},"pageContext":{"slug":"/composer-modman/","previous":{"fields":{"slug":"/m2-create-admin/"},"frontmatter":{"title":"Admin user creation in Magento2"}},"next":{"fields":{"slug":"/m2-remove-block-from-admin/"},"frontmatter":{"title":"Remove block via Layout Update XML via Magento2 admin area"}}}}